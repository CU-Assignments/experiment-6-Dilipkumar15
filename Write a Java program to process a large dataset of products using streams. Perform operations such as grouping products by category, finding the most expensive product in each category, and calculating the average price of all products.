import java.util.*;
import java.util.stream.*;

class Product {
    String name;
    String category;
    double price;

    public Product(String name, String category, double price) {
        this.name = name;
        this.category = category;
        this.price = price;
    }

    @Override
    public String toString() {
        return name + " (" + category + "): $" + price;
    }
}

public class ProductProcessor {
    public static void main(String[] args) {
        List<Product> products = Arrays.asList(
            new Product("Laptop", "Electronics", 1200),
            new Product("Phone", "Electronics", 800),
            new Product("TV", "Electronics", 1500),
            new Product("Sofa", "Furniture", 700),
            new Product("Table", "Furniture", 400),
            new Product("Chair", "Furniture", 150)
        );

        // Group products by category
        Map<String, List<Product>> groupedByCategory = products.stream()
            .collect(Collectors.groupingBy(product -> product.category));
        System.out.println("Products grouped by category: " + groupedByCategory);

        // Find the most expensive product in each category
        Map<String, Optional<Product>> mostExpensiveByCategory = products.stream()
            .collect(Collectors.groupingBy(
                product -> product.category,
                Collectors.maxBy(Comparator.comparingDouble(product -> product.price))
            ));
        System.out.println("Most expensive product in each category: " + mostExpensiveByCategory);

        // Calculate the average price of all products
        double averagePrice = products.stream()
            .mapToDouble(product -> product.price)
            .average()
            .orElse(0);
        System.out.println("Average price of all products: $" + averagePrice);
    }
}
